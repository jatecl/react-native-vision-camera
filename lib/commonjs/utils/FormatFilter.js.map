{"version":3,"names":["sortDevices","left","right","leftPoints","rightPoints","leftHasWideAngle","devices","includes","rightHasWideAngle","leftHasTelephoto","rightHasTelephoto","length","SCREEN_SIZE","width","Dimensions","get","height","SCREEN_ASPECT_RATIO","sortFormats","Math","round","photoWidth","videoWidth","leftAspectRatioDiff","photoHeight","rightAspectRatioDiff","abs","frameRateIncluded","range","fps","minFrameRate","maxFrameRate"],"sources":["FormatFilter.ts"],"sourcesContent":["import { Dimensions } from 'react-native';\nimport type { CameraDevice, CameraDeviceFormat, FrameRateRange } from '../CameraDevice';\n\n/**\n * Compares two devices by the following criteria:\n * * `wide-angle-camera`s are ranked higher than others\n * * Devices with more physical cameras are ranked higher than ones with less. (e.g. \"Triple Camera\" > \"Wide-Angle Camera\")\n *\n * > Note that this makes the `sort()` function descending, so the first element (`[0]`) is the \"best\" device.\n *\n * @example\n * ```ts\n * const devices = camera.devices.sort(sortDevices)\n * const bestDevice = devices[0]\n * ```\n * @method\n */\nexport const sortDevices = (left: CameraDevice, right: CameraDevice): number => {\n  let leftPoints = 0;\n  let rightPoints = 0;\n\n  const leftHasWideAngle = left.devices.includes('wide-angle-camera');\n  const rightHasWideAngle = right.devices.includes('wide-angle-camera');\n  if (leftHasWideAngle) leftPoints += 2;\n  if (rightHasWideAngle) rightPoints += 2;\n\n  // telephoto cameras often have very poor quality.\n  const leftHasTelephoto = left.devices.includes('telephoto-camera');\n  const rightHasTelephoto = right.devices.includes('telephoto-camera');\n  if (leftHasTelephoto) leftPoints -= 2;\n  if (rightHasTelephoto) rightPoints -= 2;\n\n  if (left.devices.length > right.devices.length) leftPoints += 1;\n  if (right.devices.length > left.devices.length) rightPoints += 1;\n\n  return rightPoints - leftPoints;\n};\n\nconst SCREEN_SIZE = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height,\n};\nconst SCREEN_ASPECT_RATIO = SCREEN_SIZE.width / SCREEN_SIZE.height;\n\n/**\n * Sort formats by resolution and aspect ratio difference (to the Screen size).\n *\n * > Note that this makes the `sort()` function descending, so the first element (`[0]`) is the \"best\" device.\n */\nexport const sortFormats = (left: CameraDeviceFormat, right: CameraDeviceFormat): number => {\n  let leftPoints = 0,\n    rightPoints = 0;\n\n  // we downscale the points so much that we are in smaller number ranges for future calculations\n  // e.g. for 4k (4096), this adds 8 points.\n  leftPoints += Math.round(left.photoWidth / 500);\n  rightPoints += Math.round(right.photoWidth / 500);\n  // e.g. for 4k (4096), this adds 8 points.\n  leftPoints += Math.round(left.videoWidth / 500);\n  rightPoints += Math.round(right.videoWidth / 500);\n\n  // we downscale the points here as well, so if left has 16:9 and right has 21:9, this roughly\n  // adds 5 points. If the difference is smaller, e.g. 16:9 vs 17:9, this roughly adds a little\n  // bit over 1 point, just enough to overrule the FPS below.\n  const leftAspectRatioDiff = left.photoHeight / left.photoWidth - SCREEN_ASPECT_RATIO;\n  const rightAspectRatioDiff = right.photoHeight / right.photoWidth - SCREEN_ASPECT_RATIO;\n  leftPoints -= Math.abs(leftAspectRatioDiff) * 10;\n  rightPoints -= Math.abs(rightAspectRatioDiff) * 10;\n\n  return rightPoints - leftPoints;\n};\n\n/**\n * Returns `true` if the given Frame Rate Range (`range`) contains the given frame rate (`fps`)\n *\n * @param {FrameRateRange} range The range to check if the given `fps` are included in\n * @param {number} fps The FPS to check if the given `range` supports.\n * @example\n * ```ts\n * // get all formats that support 60 FPS\n * const formatsWithHighFps = useMemo(() => device.formats.filter((f) => f.frameRateRanges.some((r) => frameRateIncluded(r, 60))), [device.formats])\n * ```\n * @method\n */\nexport const frameRateIncluded = (range: FrameRateRange, fps: number): boolean => fps >= range.minFrameRate && fps <= range.maxFrameRate;\n"],"mappings":"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"}