{"version":3,"names":["React","requireNativeComponent","NativeModules","findNodeHandle","Platform","CameraCaptureError","CameraRuntimeError","tryParseNativeCameraError","isErrorWithCause","CameraModule","CameraView","console","error","Camera","PureComponent","constructor","props","displayName","onViewReady","bind","onInitialized","onError","onFrameProcessorPerformanceSuggestionAvailable","ref","createRef","lastFrameProcessor","undefined","handle","nodeHandle","current","takePhoto","options","e","takeSnapshot","OS","startRecording","onRecordingError","onRecordingFinished","passThroughOptions","onRecordCallback","video","pauseRecording","resumeRecording","stopRecording","focus","point","getAvailableVideoCodecs","fileType","getAvailableCameraDevices","getCameraPermissionStatus","getMicrophonePermissionStatus","requestCameraPermission","requestMicrophonePermission","event","nativeEvent","cause","code","message","assertFrameProcessorsEnabled","global","setFrameProcessor","unsetFrameProcessor","frameProcessor","isNativeViewMounted","componentDidUpdate","render","device","frameProcessorFps","id","NativeCameraView"],"sources":["Camera.tsx"],"sourcesContent":["import React from 'react';\nimport { requireNativeComponent, NativeModules, NativeSyntheticEvent, findNodeHandle, NativeMethods, Platform } from 'react-native';\nimport type { FrameProcessorPerformanceSuggestion, VideoFileType } from '.';\nimport type { CameraDevice } from './CameraDevice';\nimport type { ErrorWithCause } from './CameraError';\nimport { CameraCaptureError, CameraRuntimeError, tryParseNativeCameraError, isErrorWithCause } from './CameraError';\nimport type { CameraProps } from './CameraProps';\nimport type { Frame } from './Frame';\nimport type { PhotoFile, TakePhotoOptions } from './PhotoFile';\nimport type { Point } from './Point';\nimport type { TakeSnapshotOptions } from './Snapshot';\nimport type { CameraVideoCodec, RecordVideoOptions, VideoFile } from './VideoFile';\n\n//#region Types\nexport type CameraPermissionStatus = 'authorized' | 'not-determined' | 'denied' | 'restricted';\nexport type CameraPermissionRequestResult = 'authorized' | 'denied';\n\ninterface OnErrorEvent {\n  code: string;\n  message: string;\n  cause?: ErrorWithCause;\n}\ntype NativeCameraViewProps = Omit<\n  CameraProps,\n  'device' | 'onInitialized' | 'onError' | 'onFrameProcessorPerformanceSuggestionAvailable' | 'frameProcessor' | 'frameProcessorFps'\n> & {\n  cameraId: string;\n  frameProcessorFps?: number; // native cannot use number | string, so we use '-1' for 'auto'\n  enableFrameProcessor: boolean;\n  onInitialized?: (event: NativeSyntheticEvent<void>) => void;\n  onError?: (event: NativeSyntheticEvent<OnErrorEvent>) => void;\n  onFrameProcessorPerformanceSuggestionAvailable?: (event: NativeSyntheticEvent<FrameProcessorPerformanceSuggestion>) => void;\n  onViewReady: () => void;\n};\ntype RefType = React.Component<NativeCameraViewProps> & Readonly<NativeMethods>;\n//#endregion\n\n// NativeModules automatically resolves 'CameraView' to 'CameraViewModule'\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst CameraModule = NativeModules.CameraView;\nif (CameraModule == null) console.error(\"Camera: Native Module 'CameraView' was null! Did you run pod install?\");\n\n//#region Camera Component\n/**\n * ### A powerful `<Camera>` component.\n *\n * Read the [VisionCamera documentation](https://mrousavy.github.io/react-native-vision-camera/) for more information.\n *\n * The `<Camera>` component's most important (and therefore _required_) properties are:\n *\n * * {@linkcode CameraProps.device | device}: Specifies the {@linkcode CameraDevice} to use. Get a {@linkcode CameraDevice} by using the {@linkcode useCameraDevices | useCameraDevices()} hook, or manually by using the {@linkcode Camera.getAvailableCameraDevices Camera.getAvailableCameraDevices()} function.\n * * {@linkcode CameraProps.isActive | isActive}: A boolean value that specifies whether the Camera should actively stream video frames or not. This can be compared to a Video component, where `isActive` specifies whether the video is paused or not. If you fully unmount the `<Camera>` component instead of using `isActive={false}`, the Camera will take a bit longer to start again.\n *\n * @example\n * ```tsx\n * function App() {\n *   const devices = useCameraDevices('wide-angle-camera')\n *   const device = devices.back\n *\n *   if (device == null) return <LoadingView />\n *   return (\n *     <Camera\n *       style={StyleSheet.absoluteFill}\n *       device={device}\n *       isActive={true}\n *     />\n *   )\n * }\n * ```\n *\n * @component\n */\nexport class Camera extends React.PureComponent<CameraProps> {\n  /** @internal */\n  static displayName = 'Camera';\n  /** @internal */\n  displayName = Camera.displayName;\n  private lastFrameProcessor: ((frame: Frame) => void) | undefined;\n  private isNativeViewMounted = false;\n\n  private readonly ref: React.RefObject<RefType>;\n\n  /** @internal */\n  constructor(props: CameraProps) {\n    super(props);\n    this.onViewReady = this.onViewReady.bind(this);\n    this.onInitialized = this.onInitialized.bind(this);\n    this.onError = this.onError.bind(this);\n    this.onFrameProcessorPerformanceSuggestionAvailable = this.onFrameProcessorPerformanceSuggestionAvailable.bind(this);\n    this.ref = React.createRef<RefType>();\n    this.lastFrameProcessor = undefined;\n  }\n\n  private get handle(): number | null {\n    const nodeHandle = findNodeHandle(this.ref.current);\n    if (nodeHandle == null || nodeHandle === -1) {\n      throw new CameraRuntimeError(\n        'system/view-not-found',\n        \"Could not get the Camera's native view tag! Does the Camera View exist in the native view-tree?\",\n      );\n    }\n\n    return nodeHandle;\n  }\n\n  //#region View-specific functions (UIViewManager)\n  /**\n   * Take a single photo and write it's content to a temporary file.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while capturing the photo. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   * @example\n   * ```ts\n   * const photo = await camera.current.takePhoto({\n   *   qualityPrioritization: 'quality',\n   *   flash: 'on',\n   *   enableAutoRedEyeReduction: true\n   * })\n   * ```\n   */\n  public async takePhoto(options?: TakePhotoOptions): Promise<PhotoFile> {\n    try {\n      return await CameraModule.takePhoto(this.handle, options ?? {});\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Take a snapshot of the current preview view.\n   *\n   * This can be used as an alternative to {@linkcode Camera.takePhoto | takePhoto()} if speed is more important than quality\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while taking a snapshot. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @platform Android\n   * @example\n   * ```ts\n   * const photo = await camera.current.takeSnapshot({\n   *   quality: 85,\n   *   skipMetadata: true\n   * })\n   * ```\n   */\n  public async takeSnapshot(options?: TakeSnapshotOptions): Promise<PhotoFile> {\n    if (Platform.OS !== 'android')\n      throw new CameraCaptureError('capture/capture-type-not-supported', `'takeSnapshot()' is not available on ${Platform.OS}!`);\n\n    try {\n      return await CameraModule.takeSnapshot(this.handle, options ?? {});\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Start a new video recording.\n   *\n   * Records in the following formats:\n   * * **iOS**: QuickTime (`.mov`)\n   * * **Android**: MPEG4 (`.mp4`)\n   *\n   * @blocking This function is synchronized/blocking.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while starting the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * camera.current.startRecording({\n   *   onRecordingFinished: (video) => console.log(video),\n   *   onRecordingError: (error) => console.error(error),\n   * })\n   * setTimeout(() => {\n   *   camera.current.stopRecording()\n   * }, 5000)\n   * ```\n   */\n  public startRecording(options: RecordVideoOptions): void {\n    const { onRecordingError, onRecordingFinished, ...passThroughOptions } = options;\n    if (typeof onRecordingError !== 'function' || typeof onRecordingFinished !== 'function')\n      throw new CameraRuntimeError('parameter/invalid-parameter', 'The onRecordingError or onRecordingFinished functions were not set!');\n\n    const onRecordCallback = (video?: VideoFile, error?: CameraCaptureError): void => {\n      if (error != null) return onRecordingError(error);\n      if (video != null) return onRecordingFinished(video);\n    };\n    // TODO: Use TurboModules to either make this a sync invokation, or make it async.\n    try {\n      CameraModule.startRecording(this.handle, passThroughOptions, onRecordCallback);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Pauses the current video recording.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while pausing the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * // Start\n   * await camera.current.startRecording()\n   * await timeout(1000)\n   * // Pause\n   * await camera.current.pauseRecording()\n   * await timeout(500)\n   * // Resume\n   * await camera.current.resumeRecording()\n   * await timeout(2000)\n   * // Stop\n   * const video = await camera.current.stopRecording()\n   * ```\n   */\n  public async pauseRecording(): Promise<void> {\n    try {\n      return await CameraModule.pauseRecording(this.handle);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Resumes a currently paused video recording.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while resuming the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * // Start\n   * await camera.current.startRecording()\n   * await timeout(1000)\n   * // Pause\n   * await camera.current.pauseRecording()\n   * await timeout(500)\n   * // Resume\n   * await camera.current.resumeRecording()\n   * await timeout(2000)\n   * // Stop\n   * const video = await camera.current.stopRecording()\n   * ```\n   */\n  public async resumeRecording(): Promise<void> {\n    try {\n      return await CameraModule.resumeRecording(this.handle);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Stop the current video recording.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while stopping the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * await camera.current.startRecording()\n   * setTimeout(async () => {\n   *  const video = await camera.current.stopRecording()\n   * }, 5000)\n   * ```\n   */\n  public async stopRecording(): Promise<void> {\n    try {\n      return await CameraModule.stopRecording(this.handle);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Focus the camera to a specific point in the coordinate system.\n   * @param {Point} point The point to focus to. This should be relative to the Camera view's coordinate system,\n   * and expressed in Pixel on iOS and Points on Android.\n   *  * `(0, 0)` means **top left**.\n   *  * `(CameraView.width, CameraView.height)` means **bottom right**.\n   *\n   * Make sure the value doesn't exceed the CameraView's dimensions.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while focussing. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   * @example\n   * ```ts\n   * await camera.current.focus({\n   *   x: tapEvent.x,\n   *   y: tapEvent.y\n   * })\n   * ```\n   */\n  public async focus(point: Point): Promise<void> {\n    try {\n      return await CameraModule.focus(this.handle, point);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  //#endregion\n\n  /**\n   * Get a list of video codecs the current camera supports for a given file type.  Returned values are ordered by efficiency (descending).\n   * @example\n   * ```ts\n   * const codecs = await camera.current.getAvailableVideoCodecs(\"mp4\")\n   * ```\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting available video codecs. Use the {@linkcode ParameterError.code | code} property to get the actual error\n   * @platform iOS\n   */\n  public async getAvailableVideoCodecs(fileType?: VideoFileType): Promise<CameraVideoCodec[]> {\n    if (Platform.OS !== 'ios') return []; // no video codecs supported on other platforms.\n\n    try {\n      return await CameraModule.getAvailableVideoCodecs(this.handle, fileType);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  //#region Static Functions (NativeModule)\n  /**\n   * Get a list of all available camera devices on the current phone.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting all available camera devices. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   * @example\n   * ```ts\n   * const devices = await Camera.getAvailableCameraDevices()\n   * const filtered = devices.filter((d) => matchesMyExpectations(d))\n   * const sorted = devices.sort(sortDevicesByAmountOfCameras)\n   * return {\n   *   back: sorted.find((d) => d.position === \"back\"),\n   *   front: sorted.find((d) => d.position === \"front\")\n   * }\n   * ```\n   */\n  public static async getAvailableCameraDevices(): Promise<CameraDevice[]> {\n    try {\n      return await CameraModule.getAvailableCameraDevices();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Gets the current Camera Permission Status. Check this before mounting the Camera to ensure\n   * the user has permitted the app to use the camera.\n   *\n   * To actually prompt the user for camera permission, use {@linkcode Camera.requestCameraPermission | requestCameraPermission()}.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting the current permission status. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async getCameraPermissionStatus(): Promise<CameraPermissionStatus> {\n    try {\n      return await CameraModule.getCameraPermissionStatus();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Gets the current Microphone-Recording Permission Status. Check this before mounting the Camera to ensure\n   * the user has permitted the app to use the microphone.\n   *\n   * To actually prompt the user for microphone permission, use {@linkcode Camera.requestMicrophonePermission | requestMicrophonePermission()}.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting the current permission status. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async getMicrophonePermissionStatus(): Promise<CameraPermissionStatus> {\n    try {\n      return await CameraModule.getMicrophonePermissionStatus();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Shows a \"request permission\" alert to the user, and resolves with the new camera permission status.\n   *\n   * If the user has previously blocked the app from using the camera, the alert will not be shown\n   * and `\"denied\"` will be returned.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while requesting permission. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async requestCameraPermission(): Promise<CameraPermissionRequestResult> {\n    try {\n      return await CameraModule.requestCameraPermission();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Shows a \"request permission\" alert to the user, and resolves with the new microphone permission status.\n   *\n   * If the user has previously blocked the app from using the microphone, the alert will not be shown\n   * and `\"denied\"` will be returned.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while requesting permission. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async requestMicrophonePermission(): Promise<CameraPermissionRequestResult> {\n    try {\n      return await CameraModule.requestMicrophonePermission();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  //#endregion\n\n  //#region Events (Wrapped to maintain reference equality)\n  private onError(event: NativeSyntheticEvent<OnErrorEvent>): void {\n    if (this.props.onError != null) {\n      const error = event.nativeEvent;\n      const cause = isErrorWithCause(error.cause) ? error.cause : undefined;\n      this.props.onError(\n        // @ts-expect-error We're casting from unknown bridge types to TS unions, I expect it to hopefully work\n        new CameraRuntimeError(error.code, error.message, cause),\n      );\n    }\n  }\n\n  private onInitialized(): void {\n    this.props.onInitialized?.();\n  }\n\n  private onFrameProcessorPerformanceSuggestionAvailable(event: NativeSyntheticEvent<FrameProcessorPerformanceSuggestion>): void {\n    if (this.props.onFrameProcessorPerformanceSuggestionAvailable != null)\n      this.props.onFrameProcessorPerformanceSuggestionAvailable(event.nativeEvent);\n  }\n  //#endregion\n\n  //#region Lifecycle\n  /** @internal */\n  private assertFrameProcessorsEnabled(): void {\n    // @ts-expect-error JSI functions aren't typed\n    if (global.setFrameProcessor == null || global.unsetFrameProcessor == null) {\n      throw new CameraRuntimeError(\n        'frame-processor/unavailable',\n        'Frame Processors are not enabled. See https://mrousavy.github.io/react-native-vision-camera/docs/guides/troubleshooting',\n      );\n    }\n  }\n\n  private setFrameProcessor(frameProcessor: (frame: Frame) => void): void {\n    this.assertFrameProcessorsEnabled();\n    // @ts-expect-error JSI functions aren't typed\n    global.setFrameProcessor(this.handle, frameProcessor);\n  }\n\n  private unsetFrameProcessor(): void {\n    this.assertFrameProcessorsEnabled();\n    // @ts-expect-error JSI functions aren't typed\n    global.unsetFrameProcessor(this.handle);\n  }\n\n  private onViewReady(): void {\n    this.isNativeViewMounted = true;\n    if (this.props.frameProcessor != null) {\n      // user passed a `frameProcessor` but we didn't set it yet because the native view was not mounted yet. set it now.\n      this.setFrameProcessor(this.props.frameProcessor);\n      this.lastFrameProcessor = this.props.frameProcessor;\n    }\n  }\n\n  /** @internal */\n  componentDidUpdate(): void {\n    if (!this.isNativeViewMounted) return;\n    const frameProcessor = this.props.frameProcessor;\n    if (frameProcessor !== this.lastFrameProcessor) {\n      // frameProcessor argument identity changed. Update native to reflect the change.\n      if (frameProcessor != null) this.setFrameProcessor(frameProcessor);\n      else this.unsetFrameProcessor();\n\n      this.lastFrameProcessor = frameProcessor;\n    }\n  }\n  //#endregion\n\n  /** @internal */\n  public render(): React.ReactNode {\n    // We remove the big `device` object from the props because we only need to pass `cameraId` to native.\n    const { device, frameProcessor, frameProcessorFps, ...props } = this.props;\n    return (\n      <NativeCameraView\n        {...props}\n        frameProcessorFps={frameProcessorFps === 'auto' ? -1 : frameProcessorFps}\n        cameraId={device.id}\n        ref={this.ref}\n        onViewReady={this.onViewReady}\n        onInitialized={this.onInitialized}\n        onError={this.onError}\n        onFrameProcessorPerformanceSuggestionAvailable={this.onFrameProcessorPerformanceSuggestionAvailable}\n        enableFrameProcessor={frameProcessor != null}\n      />\n    );\n  }\n}\n//#endregion\n\n// requireNativeComponent automatically resolves 'CameraView' to 'CameraViewManager'\nconst NativeCameraView = requireNativeComponent<NativeCameraViewProps>(\n  'CameraView',\n  // @ts-expect-error because the type declarations are kinda wrong, no?\n  Camera,\n);\n"],"mappings":"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"}